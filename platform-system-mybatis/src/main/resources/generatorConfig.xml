<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
	<!-- 指定一个需要在配置中解析使用的外部属性文件 -->
<!--	<properties resource="mybatis/generator.jdbc.properties" />-->
	<!-- 添加运行类路径位置 -->
	<!-- <classPathEntry location="${class.PathEntry}" /> -->
	<!-- <classPathEntry location="D:/mvn_jar/mysql/mysql-connector-java/5.1.43/mysql-connector-java-5.1.43.jar" /> -->
	<!-- 用于指定生成一组对象的环境 -->
	<context id="MysqlTables" targetRuntime="MyBatis3Simple" defaultModelType="flat">
		<!-- 生成的Java模型对象增加了equals和hashCode方法 -->
		<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"></plugin>
		<!-- 添加了java.io.Serializable标记接口 -->
		<plugin type="org.mybatis.generator.plugins.SerializablePlugin"></plugin>
		<!-- 给实体类添加toString()方法 -->
		<plugin type="org.mybatis.generator.plugins.ToStringPlugin"></plugin>
		<!-- 生成通用Mapper -->
		<plugin type="tk.mybatis.mapper.generator.MapperPlugin">
			<property name="mappers" value="tk.mybatis.mapper.common.Mapper"/>
			<!-- <property name="mappers" value="${packagePath}.mybatis.base.dao.BaseMapper"/>-->
			<!-- caseSensitive默认false，当数据库表名区分大小写时，可以将该属性设置为true -->
			<property name="caseSensitive" value="true"/>
		</plugin>
		<!-- 定义注释生成器的属性 -->
		<commentGenerator>
			<!-- 生成的代码中是否包含任何注释:true时，不会往生成的元素中添加任何注释 -->
			<property name="suppressAllComments" value="true"/>
		</commentGenerator>
		<!-- 指定数据库连接所需的内省表的属性 -->
		<jdbcConnection driverClass="com.mysql.jdbc.Driver"
						connectionURL="jdbc:mysql://localhost:3306/myself?characterEncoding=utf8" userId="root"
						password="123456"></jdbcConnection>
	    <!-- java类型处理器
			  用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
			  注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
	    -->
		<javaTypeResolver>
			<!-- 如果数据库列是decimal或numeric类型,将使用java.math.bigdecimal -->
			<!--
				true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
				false：默认,
				scale>0;length>18：使用BigDecimal;
				scale=0;length[10,18]：使用Long；
				scale=0;length[5,9]：使用Integer；
				scale=0;length<5：使用Short；
			 -->
			<property name="forceBigDecimals" value="true" />
		</javaTypeResolver>
		<!-- 生成模型的包名和位置 -->
		<!-- java模型创建器，是必须要的元素
			  负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
			     targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
			     targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
		-->
		<javaModelGenerator targetPackage="cn.myself.platform.model.sys" targetProject="src\main\java">
			<!-- <property name="rootClass" value="com.hz.xjd.model.base.BaseEntity"/> -->
			<property name="enableSubPackages" value="true"/>
			<property name="trimStrings" value="true"/>
		</javaModelGenerator>
		<!-- 生成映射文件的包名和位置 -->
		<!-- 生成SQL map的XML文件生成器，
			  注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
			  或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
			 targetPackage/targetProject:同javaModelGenerator
		-->
		<sqlMapGenerator targetPackage="mybatis.mappings.sys" targetProject="src\main\resources">
			<!-- 基于目录和表来生成不同的Java包 -->
			<property name="enableSubPackages" value="true" />
		</sqlMapGenerator>
		<!-- 生成DAO的包名和位置  -->
		<!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
			 targetPackage/targetProject:同javaModelGenerator
			 type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
			    1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
			    2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
			    3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
			 注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
		-->
		<javaClientGenerator targetPackage="cn.myself.platform.dao.sys"
			targetProject="src\main\java" type="XMLMAPPER">
			<!-- 基于目录和表来生成不同的Java包 -->
			<property name="enableSubPackages" value="true" />
		</javaClientGenerator>

		<table tableName="sys_%"  enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false"
			   enableSelectByExample="false" selectByExampleQueryId="false" >
		</table>

	</context>
</generatorConfiguration>